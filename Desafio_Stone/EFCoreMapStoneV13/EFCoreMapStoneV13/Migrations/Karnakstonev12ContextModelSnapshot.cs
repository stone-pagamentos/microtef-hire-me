// <auto-generated />
using System;
using EFCoreMapStoneV13;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCoreMapStoneV13.Migrations
{
    [DbContext(typeof(Karnakstonev12Context))]
    partial class Karnakstonev12ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFCoreMapStoneV13.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.Card", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Attempts");

                    b.Property<int>("Blocked");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(19)
                        .IsUnicode(false);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("HasPassword");

                    b.Property<Guid>("IdBrand");

                    b.Property<Guid>("IdCardType");

                    b.Property<Guid>("IdCustomer");

                    b.Property<decimal>("Limit")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("LimitAvailable")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdBrand");

                    b.HasIndex("IdCardType");

                    b.HasIndex("IdCustomer");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.CardBrand", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CardBrand");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.CardType", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CardType");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.Customer", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.StoredEvent", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<Guid>("AggregateId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Data");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("StoredEvent");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.Transaction", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("IdCard");

                    b.Property<Guid>("IdTransactionStatus");

                    b.Property<Guid>("IdTransactionType");

                    b.Property<int>("Number");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("IdCard");

                    b.HasIndex("IdTransactionStatus");

                    b.HasIndex("IdTransactionType");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.TransactionStatus", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TransactionStatus");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.TransactionType", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TransactionType");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.AspNetRoleClaims", b =>
                {
                    b.HasOne("EFCoreMapStoneV13.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EFCoreMapStoneV13.AspNetUserClaims", b =>
                {
                    b.HasOne("EFCoreMapStoneV13.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EFCoreMapStoneV13.AspNetUserLogins", b =>
                {
                    b.HasOne("EFCoreMapStoneV13.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EFCoreMapStoneV13.AspNetUserRoles", b =>
                {
                    b.HasOne("EFCoreMapStoneV13.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EFCoreMapStoneV13.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EFCoreMapStoneV13.Card", b =>
                {
                    b.HasOne("EFCoreMapStoneV13.CardBrand", "IdBrandNavigation")
                        .WithMany("Card")
                        .HasForeignKey("IdBrand")
                        .HasConstraintName("FK_Card_CardBrand");

                    b.HasOne("EFCoreMapStoneV13.CardType", "IdCardTypeNavigation")
                        .WithMany("Card")
                        .HasForeignKey("IdCardType")
                        .HasConstraintName("FK_Card_CardType");

                    b.HasOne("EFCoreMapStoneV13.Customer", "IdCustomerNavigation")
                        .WithMany("Card")
                        .HasForeignKey("IdCustomer")
                        .HasConstraintName("FK_Card_Customer");
                });

            modelBuilder.Entity("EFCoreMapStoneV13.Transaction", b =>
                {
                    b.HasOne("EFCoreMapStoneV13.Card", "IdCardNavigation")
                        .WithMany("Transaction")
                        .HasForeignKey("IdCard")
                        .HasConstraintName("FK_Transaction_Card");

                    b.HasOne("EFCoreMapStoneV13.TransactionStatus", "IdTransactionStatusNavigation")
                        .WithMany("Transaction")
                        .HasForeignKey("IdTransactionStatus")
                        .HasConstraintName("FK_Transaction_TransactionStatus");

                    b.HasOne("EFCoreMapStoneV13.TransactionType", "IdTransactionTypeNavigation")
                        .WithMany("Transaction")
                        .HasForeignKey("IdTransactionType")
                        .HasConstraintName("FK_Transaction_TransactionType");
                });
#pragma warning restore 612, 618
        }
    }
}
